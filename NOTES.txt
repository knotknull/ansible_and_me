Notes on ansible:
==================

Ansible allows:
- Change Management
- Provisioning
- Automation
- Orchestration

Change Management:
  - Define a System State
  - Enforce defined System State
ex.   Apache Web Server Installed
      Apache Web Server Version X.YY.Z
      Apache Web Server Started

Provisioning:
  - Transition from one state to another
  - Install software each time
        - Install web server
        - Copy config
        - Copy web files
        - Install security updates
        - Start service

Automation:
  - Ordered Tasks
  - Make decisions
  - Ad-hoc tasks

Orchestration:
  - Coordination of automation between systems
      (Task 1/System 1 >> Task 2/System 2 >> Task 3/System 3 >> Task /System 1)


- Utilizes YAML for playbooks
- Uses SSH
- Understands root / sudo
- encrypted vault (passwords, etc.)
- easy to extend (URL / REST Calls/ Shell Commands / Scripts)
- Ansible Galaxy (community based repo)


Ansible Control Server ----> Remote Server
Control Server Requirements:
  - Python 2.6+
  - Must by *NIX (Not supported on Windows for Control Server)

Remote Server:
  - Python 2.5+   (Python 2.4 w/ simplejson)
  - SSH
  - For Windows: Need Remote Powershell
  - Python 3 support ???

###############################################################################

Architecture:

                                                                      Remote
  ----------------                                                    Servers
  :              :                                                        :--:
  :   Inventory  :                                                :-----> :--:
  :              :                                                :
  ----------------                                                :       :--:
         :                                                        :-----> :--:
         V                                       :---:            :
  ----------------       ------------------      : P :            :       :--:
  :              :       :                :      : Y :     SSH    :-----> :--:
  :   Playbook   :  -->  : Ansible Config : ---> : T :  ------->> :
  :              :       :                :      : H :            :       :--:
  ----------------       ------------------      : O :            :-----> :--:
         ^                                       : N :            :
         :                                       :---:            :       :--:
  ----------------                                                :-----> :--:
  :              :
  :   Modules    :
  :              :
  ----------------


Inventory:
Text file of servers, Host level vars, groups, roles, user accounts
Can be a script that retrieves this information.
[ Think hosts file ]


Modules:
Programmed unit of work, sets of actions, internal / external
i.e. using yum vs. apt

Playbooks:
Files created to execute task or set of tasks.  Made of individuals plays

Play:
Single set of tasks using modules executed on defined hosts.

Ansible Config:
Global vars for ansible and update defaults. Can override default configs
dependent on location of file.
   i.e. Can override only for a specific playbook.

Ansible builds plays / playbook and creates a python package that is pushed to
remote systems.

Variables:
  - Host Variables:  Variables defined in inventory files used on hosts
                i.e. sudo account

  - Fact Variables:  Fact data / environmental data, gathered from remote hosts
                (OS, IP Address, Memory, CPU speeds)

  - Dynamic Variables:  Created during course of playbook and then destroyed
            Variable set during execution of play, created at runtime.

###############################################################################
Execution Flow

  - Evaluate Playbook
  - Creates Python package
  - Identify hosts to deploy to
  - Deploy package
  - Execute package on remote
  - Results returned via JSON
  - Python package removed on remote system

Multiple machines can be deployed against at the same time

Execution Types

  Remote Execution Type:  package executed on remote system
  Local Execution Type :  local ansible server is executing package

Local execution type done for servers that can't receive a python package.
Mostly webservice / API calls.  Local calls, HTTP request remotely.
i.e. configuring Network equipment (can't push package but can make API calls)



###############################################################################
## Install Ansible
###############################################################################
Once vagrant and virtualbox are installed and setup (See Vagrant_NOTES.txt),
install ansible on the acs VM.

1.  Login to acs vm
> vagrant ssh acs

2. Install ansible (on debian)
sudo apt-get install ansible

[on centos]
sudo yum install epel-release
sudo yum install ansible

[install via code compile ]
sudo yum install gcc                  ## install compiler
sudo yum install python-setuptools    ## install python tools
sudo yum install epel-release         ## allow EPEL packages
sudo yum install python-pip           ## install python install package
sudo yum install python-devel         ## install python dev headers
sudo pip install ansible              ## install ansible via pip

###############################################################################
## Configure Ansible
###############################################################################
vagrant ssh acs

# create an inventory file
> cat inventory
192.168.33.20
192.168.33.30

# ping via ansible
# -u user -m module -k prompt for password
ansible 192.168.33.20 -i inventory -u vagrant -m ping -k
>SSH password:
192.168.33.20 | success >> {
    "changed": false,
    "ping": "pong"
}
ansible all -i inventory -u vagrant -m ping -k
SSH password:
192.168.33.20 | success >> {
    "changed": false,
    "ping": "pong"
}

192.168.33.30 | success >> {
    "changed": false,
    "ping": "pong"
}

# Run an adhoc command via ansible
NOTE: command module is default hence:
     ansible all -i inventory -u vagrant -k -a "ls /tmp/"
ansible all -i inventory -u vagrant -m command -k -a "ls /tmp/"
> SSH password:
192.168.33.20 | success | rc=0 >>
ks-script-nR80gm
ks-script-nR80gm.log
script.sh
stderr
yum.log

192.168.33.30 | success | rc=0 >>
ks-script-nR80gm
ks-script-nR80gm.log
pip-uLEl8k-uninstall
script.sh
stderr
yum.log

NOTE: command module and shell module allows you to both run commands.  However,
command module runs a command inside of python, the shell module runs commands
directly against the shell, hence shell module can use shell variables like
$HOME or $PATH, command module cannot.

###############################################################################
## Inventory Fundamentals
###############################################################################
Inventory file can be located anywhere on filesystem.
Behavioral Parameters:
  - configurations that can be applied to a system or group of systems
        - ssh users / passwords / private key file / path to python 2.6

Groups:
  - group systems as test or dev or "web servers"

Groups of groups:
  - Parent groups that you can add sub-groups to
        - data center west, dc east, all_test, ALL-PROD

Assign Variables:
  - Assign variables to systems and groups.
        - NTP_SERVER, SYSLOG-SRVR
        - Apply to entire data center
        - Attach a variable to group.  All servers in group gets that variable

Scale out with multiple files:
  - Avoid one large inventory file

Static / Dynamic:
  - Inventory file can be static
  - Can also be dynamic
          - make file executable
          - ansible will execute the file and use data returned back.



Example File:
  - Per host variable described on same line as host.
  - Example below shows ssh credentials defined only for db1
  - db2 gets python interpreter path explicitly set
  - :children keyword indicates it is a parent group and
     inventory beneath are groups
  - :vars keyword variable for an entire group
      - all hosts under that group are assigned these vars

[db]
db1.company.com ansible_ssh_user=aaron ansible_ssh_pass=123
db2.company.com ansbile_python_interpreter=/usr/bin/python


[datacenter-west:children]
db

[datacenter-west:vars]
ansible_ssh_user=ansible_user
ansible_ssh_pass=#45e!GH
ntp-server=5.6.7.8



###############################################################################
## Scale out inventory files
###############################################################################

Break up inventroy utilizing directories.  Example Basic Directory structure:
[ Relative to same path]

  |-----group_vars
  |-----|-----all
  |-----|-----db
  |
  |-----host_vars
  |-----|-----web1
  |
  |-----inventory_prod
  |-----inventory_test


Multi-Environment Directory Structure

  |-----production
  |--------|
  |--------|-----group_vars
  |--------|-----|-----all
  |--------|-----|-----db
  |--------|
  |--------|-----host_vars
  |--------|-----|-----web1
  |--------|
  |--------|-----inventory_prod
  |-----test
  |--------|
  |--------|-----group_vars
  |--------|-----|-----all
  |--------|-----|-----db
  |--------|
  |--------|-----host_vars
  |--------|-----|-----web1
  |--------|
  |--------|-----inventory_test

Order of Operations (Precedence)
1.  (Group_Vars) All
2.  (Group_Vars) GroupName
3.  (Host_Vars) HostName

If there is a variable name in all three levels (i.e. LOGDIR). The HostName
will have the highest precedence because it is the mose specific.

###############################################################################
## Variable file written in YAML
## NOTE:  --- indicate file is YAML.
##        Comments use #
##        Variables are Key/Value pair delimited with :
###############################################################################
---
# file: group_vars/dcl-west
ntp: ntp-west.example.com
syslog: logger-west.example.com

Using the above directory structure, if we have a group_vars/all file with
---

# This is our user
username: all_username


Then the following command will create a user with {{username}} variable set
in the group_vars/all file.

ansible webservers -i inventory_prod -m user -a"name={{username}} password=12345"

## with sudo permissions
ansible webservers -i inventory_prod -m user -a"name={{username}} password=12345"  --sudo

If there is a value in groups_var/weberservers for username, the above will
use the more specific group level variable over the all level variable

ex.  All level variable groups_var/all sets username: all_user

vagrant@acs:~/ex4/production$ ansible webservers -i inventory_prod -m user -a"name={{username}} password=12345" --sudo
web1 | success >> {
    "changed": true,
    "comment": "",
    "createhome": true,
    "group": 501,
    "home": "/home/all_username",
    "name": "all_username",
    "password": "NOT_LOGGING_PASSWORD",
    "shell": "/bin/bash",
    "state": "present",
    "system": false,
    "uid": 501
}


ex.  Group level variable groups_var/weservers sets username: group_user

vagrant@acs:~/ex4/production$ ansible webservers -i inventory_prod -m user -a"name={{username}} password=12345" --sudo
web1 | success >> {
    "changed": true,
    "comment": "",
    "createhome": true,
    "group": 502,
    "home": "/home/group_user",
    "name": "group_user",
    "password": "NOT_LOGGING_PASSWORD",
    "shell": "/bin/bash",
    "state": "present",
    "system": false,
    "uid": 502
}

vs.

ex.  Host level variable host_vars/web1 sets username: web1_user

vagrant@acs:~/ex4/production$ ansible webservers -i inventory_prod -m user -a"name={{username}} password=12345" --sudo
web1 | success >> {
    "changed": true,
    "comment": "",
    "createhome": true,
    "group": 503,
    "home": "/home/web1_user",
    "name": "web1_user",
    "password": "NOT_LOGGING_PASSWORD",
    "shell": "/bin/bash",
    "state": "present",
    "system": false,
    "uid": 503
}


###############################################################################
## Ansible configuration files
###############################################################################

[ Configuration Order of Operations ]

1. $ANSIBLE_CONFIG   # check env var first
2. ./ansible.cfg     # check current directory of playbook or adhoc command
3. ~/.ansible.cfg    # check hidden file in $HOME directory of logged in acct
4. /etc/ansible/ansible.cfg   # Global config file, last place to check

NOTE: Configuration files are not merged, first one wins

Can override config file by setting env var:

$ANSIBLE_<config_setting>=value
i.e.
export ANSIBLE_FORKS=10      # Override FORKS value in config file

[Common Defaults]
forks:  Default = 5   # Total number of parallel operations Ansible executes /
                      # Prod recommended to 20 +/-

host_key_checking:  Default = True   # Check ssh key fingerprint, true for prod
                                     # Dev = false due to dynamic dev env

log_path:  Default = Null            # Set path to log file, ensure all users
                                     # have write perms to file


[ Config Info ]
docs.ansible.com > Popular Topics > Getting Started > Configuration File
http://docs.ansible.com/ansible/latest/intro_configuration.html

Over 80+ config settings










###############################################################################
