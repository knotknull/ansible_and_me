Notes on ansible:
==================

Ansible allows:
- Change Management
- Provisioning
- Automation
- Orchestration

Change Management:
  - Define a System State
  - Enforce defined System State
ex.   Apache Web Server Installed
      Apache Web Server Version X.YY.Z
      Apache Web Server Started

Provisioning:
  - Transition from one state to another
  - Install software each time
        - Install web server
        - Copy config
        - Copy web files
        - Install security updates
        - Start service

Automation:
  - Ordered Tasks
  - Make decisions
  - Ad-hoc tasks

Orchestration:
  - Coordination of automation between systems
      (Task 1/System 1 >> Task 2/System 2 >> Task 3/System 3 >> Task /System 1)


- Utilizes YAML for playbooks
- Uses SSH
- Understands root / sudo
- encrypted vault (passwords, etc.)
- easy to extend (URL / REST Calls/ Shell Commands / Scripts)
- Ansible Galaxy (community based repo)


Ansible Control Server ----> Remote Server
Control Server Requirements:
  - Python 2.6+
  - Must by *NIX (Not supported on Windows for Control Server)

Remote Server:
  - Python 2.5+   (Python 2.4 w/ simplejson)
  - SSH
  - For Windows: Need Remote Powershell
  - Python 3 support ???

###############################################################################

Architecture:

                                                                      Remote
  ----------------                                                    Servers
  :              :                                                        :--:
  :   Inventory  :                                                :-----> :--:
  :              :                                                :
  ----------------                                                :       :--:
         :                                                        :-----> :--:
         V                                       :---:            :
  ----------------       ------------------      : P :            :       :--:
  :              :       :                :      : Y :     SSH    :-----> :--:
  :   Playbook   :  -->  : Ansible Config : ---> : T :  ------->> :
  :              :       :                :      : H :            :       :--:
  ----------------       ------------------      : O :            :-----> :--:
         ^                                       : N :            :
         :                                       :---:            :       :--:
  ----------------                                                :-----> :--:
  :              :
  :   Modules    :
  :              :
  ----------------


Inventory:
Text file of servers, Host level vars, groups, roles, user accounts
Can be a script that retrieves this information.
[ Think hosts file ]


Modules:
Programmed unit of work, sets of actions, internal / external
i.e. using yum vs. apt

Playbooks:
Files created to execute task or set of tasks.  Made of individuals plays

Play:
Single set of tasks using modules executed on defined hosts.

Ansible Config:
Global vars for ansible and update defaults. Can override default configs
dependent on location of file.
   i.e. Can override only for a specific playbook.

Ansible builds plays / playbook and creates a python package that is pushed to
remote systems.

Variables:
  - Host Variables:  Variables defined in inventory files used on hosts
                i.e. sudo account

  - Fact Variables:  Fact data / environmental data, gathered from remote hosts
                (OS, IP Address, Memory, CPU speeds)

  - Dynamic Variables:  Created during course of playbook and then destroyed
            Variable set during execution of play, created at runtime.

###############################################################################
Execution Flow

  - Evaluate Playbook
  - Creates Python package
  - Identify hosts to deploy to
  - Deploy package
  - Execute package on remote
  - Results returned via JSON
  - Python package removed on remote system

Multiple machines can be deployed against at the same time

Execution Types

  Remote Execution Type:  package executed on remote system
  Local Execution Type :  local ansible server is executing package

Local execution type done for servers that can't receive a python package.
Mostly webservice / API calls.  Local calls, HTTP request remotely.
i.e. configuring Network equipment (can't push package but can make API calls)



###############################################################################
## Install Ansible
###############################################################################
Once vagrant and virtualbox are installed and setup (See Vagrant_NOTES.txt),
install ansible on the acs VM.

1.  Login to acs vm
> vagrant ssh acs

2. Install ansible (on debian)
sudo apt-get install ansible

[on centos]
sudo yum install epel-release
sudo yum install ansible

[install via code compile ]
sudo yum install gcc                  ## install compiler
sudo yum install python-setuptools    ## install python tools
sudo yum install epel-release         ## allow EPEL packages
sudo yum install python-pip           ## install python install package
sudo yum install python-devel         ## install python dev headers
sudo pip install ansible              ## install ansible via pip

###############################################################################
## Configure Ansible
###############################################################################
vagrant ssh acs

# create an inventory file
> cat inventory
192.168.33.20
192.168.33.30

# ping via ansible
# -u user -m module -k prompt for password
ansible 192.168.33.20 -i inventory -u vagrant -m ping -k
>SSH password:
192.168.33.20 | success >> {
    "changed": false,
    "ping": "pong"
}
ansible all -i inventory -u vagrant -m ping -k
SSH password:
192.168.33.20 | success >> {
    "changed": false,
    "ping": "pong"
}

192.168.33.30 | success >> {
    "changed": false,
    "ping": "pong"
}

# Run an adhoc command via ansible
NOTE: command module is default hence:
     ansible all -i inventory -u vagrant -k -a "ls /tmp/"
ansible all -i inventory -u vagrant -m command -k -a "ls /tmp/"
> SSH password:
192.168.33.20 | success | rc=0 >>
ks-script-nR80gm
ks-script-nR80gm.log
script.sh
stderr
yum.log

192.168.33.30 | success | rc=0 >>
ks-script-nR80gm
ks-script-nR80gm.log
pip-uLEl8k-uninstall
script.sh
stderr
yum.log

NOTE: command module and shell module allows you to both run commands.  However,
command module runs a command inside of python, the shell module runs commands
directly against the shell, hence shell module can use shell variables like
$HOME or $PATH, command module cannot.

###############################################################################
## Inventory Fundamentals
###############################################################################
Inventory file can be located anywhere on filesystem.
Behavioral Parameters:
  - configurations that can be applied to a system or group of systems
        - ssh users / passwords / private key file / path to python 2.6

Groups:
  - group systems as test or dev or "web servers"

Groups of groups:
  - Parent groups that you can add sub-groups to
        - data center west, dc east, all_test, ALL-PROD

Assign Variables:
  - Assign variables to systems and groups.
        - NTP_SERVER, SYSLOG-SRVR
        - Apply to entire data center
        - Attach a variable to group.  All servers in group gets that variable

Scale out with multiple files:
  - Avoid one large inventory file

Static / Dynamic:
  - Inventory file can be static
  - Can also be dynamic
          - make file executable
          - ansible will execute the file and use data returned back.



Example File:
  - Per host variable described on same line as host.
  - Example below shows ssh credentials defined only for db1
  - db2 gets python interpreter path explicitly set
  - :children keyword indicates it is a parent group and
     inventory beneath are groups
  - :vars keyword variable for an entire group
      - all hosts under that group are assigned these vars

[db]
db1.company.com ansible_ssh_user=aaron ansible_ssh_pass=123
db2.company.com ansbile_python_interpreter=/usr/bin/python


[datacenter-west:children]
db

[datacenter-west:vars]
ansible_ssh_user=ansible_user
ansible_ssh_pass=#45e!GH
ntp-server=5.6.7.8



###############################################################################
## Scale out inventory files
###############################################################################

Break up inventroy utilizing directories.  Example Basic Directory structure:
[ Relative to same path]

  |-----group_vars
  |-----|-----all
  |-----|-----db
  |
  |-----host_vars
  |-----|-----web1
  |
  |-----inventory_prod
  |-----inventory_test


Multi-Environment Directory Structure

  |-----production
  |--------|
  |--------|-----group_vars
  |--------|-----|-----all
  |--------|-----|-----db
  |--------|
  |--------|-----host_vars
  |--------|-----|-----web1
  |--------|
  |--------|-----inventory_prod
  |-----test
  |--------|
  |--------|-----group_vars
  |--------|-----|-----all
  |--------|-----|-----db
  |--------|
  |--------|-----host_vars
  |--------|-----|-----web1
  |--------|
  |--------|-----inventory_test

Order of Operations (Precedence)
1.  (Group_Vars) All
2.  (Group_Vars) GroupName
3.  (Host_Vars) HostName

If there is a variable name in all three levels (i.e. LOGDIR). The HostName
will have the highest precedence because it is the mose specific.

###############################################################################
## Variable file written in YAML
## NOTE:  --- indicate file is YAML.
##        Comments use #
##        Variables are Key/Value pair delimited with :
###############################################################################
---
# file: group_vars/dcl-west
ntp: ntp-west.example.com
syslog: logger-west.example.com

Using the above directory structure, if we have a group_vars/all file with
---

# This is our user
username: all_username


Then the following command will create a user with {{username}} variable set
in the group_vars/all file.

ansible webservers -i inventory_prod -m user -a"name={{username}} password=12345"

## with sudo permissions
ansible webservers -i inventory_prod -m user -a"name={{username}} password=12345"  --sudo

If there is a value in groups_var/weberservers for username, the above will
use the more specific group level variable over the all level variable

ex.  All level variable groups_var/all sets username: all_user

vagrant@acs:~/ex4/production$ ansible webservers -i inventory_prod -m user -a"name={{username}} password=12345" --sudo
web1 | success >> {
    "changed": true,
    "comment": "",
    "createhome": true,
    "group": 501,
    "home": "/home/all_username",
    "name": "all_username",
    "password": "NOT_LOGGING_PASSWORD",
    "shell": "/bin/bash",
    "state": "present",
    "system": false,
    "uid": 501
}


ex.  Group level variable groups_var/weservers sets username: group_user

vagrant@acs:~/ex4/production$ ansible webservers -i inventory_prod -m user -a"name={{username}} password=12345" --sudo
web1 | success >> {
    "changed": true,
    "comment": "",
    "createhome": true,
    "group": 502,
    "home": "/home/group_user",
    "name": "group_user",
    "password": "NOT_LOGGING_PASSWORD",
    "shell": "/bin/bash",
    "state": "present",
    "system": false,
    "uid": 502
}

vs.

ex.  Host level variable host_vars/web1 sets username: web1_user

vagrant@acs:~/ex4/production$ ansible webservers -i inventory_prod -m user -a"name={{username}} password=12345" --sudo
web1 | success >> {
    "changed": true,
    "comment": "",
    "createhome": true,
    "group": 503,
    "home": "/home/web1_user",
    "name": "web1_user",
    "password": "NOT_LOGGING_PASSWORD",
    "shell": "/bin/bash",
    "state": "present",
    "system": false,
    "uid": 503
}


###############################################################################
## Ansible configuration files
###############################################################################

[ Configuration Order of Operations ]

1. $ANSIBLE_CONFIG   # check env var first
2. ./ansible.cfg     # check current directory of playbook or adhoc command
3. ~/.ansible.cfg    # check hidden file in $HOME directory of logged in acct
4. /etc/ansible/ansible.cfg   # Global config file, last place to check

NOTE: Configuration files are not merged, first one wins

Can override config file by setting env var:

$ANSIBLE_<config_setting>=value
i.e.
export ANSIBLE_FORKS=10      # Override FORKS value in config file

[Common Defaults]
forks:  Default = 5   # Total number of parallel operations Ansible executes /
                      # Prod recommended to 20 +/-

host_key_checking:  Default = True   # Check ssh key fingerprint, true for prod
                                     # Dev = false due to dynamic dev env

log_path:  Default = Null            # Set path to log file, ensure all users
                                     # have write perms to file


[ Config Info ]
docs.ansible.com > Popular Topics > Getting Started > Configuration File
http://docs.ansible.com/ansible/latest/intro_configuration.html

Over 80+ config settings



###############################################################################
## Ansible Modules
###############################################################################

3 types of modules:
  - Core       : Supported by ansible directly
  - Extras     : Created by 3rd Parties / Community and included in distro
  - Deprecated : Module may be pulled from distro with another replacing it

[Module Documentation]

ansible-doc -l  : List all module docs

> ansible-doc -l
a10_server             Manage A10 Networks AX/SoftAX/Thunder/vThunder devices' server object.
a10_server_axapi3      Manage A10 Networks AX/SoftAX/Thunder/vThunder devices
a10_service_group      Manage A10 Networks AX/SoftAX/Thunder/vThunder devices' service groups.
a10_virtual_server     Manage A10 Networks AX/SoftAX/Thunder/vThunder devices' virtual servers.
accelerate             Enable accelerated mode on remote node


ansible-doc <module_name> : specific documentation about that module

> ansible-doc ec2
> EC2    (/usr/lib/python2.7/dist-packages/ansible/modules/cloud/amazon/ec2.py)

        Creates or terminates ec2 instances. `state=restarted' was added in 2.2


ansible-doc -s <module_name> : playbook examble (-s = snippets)

> ansible-doc -s ec2
- name: create, terminate, start or stop an instance in ec2
  ec2:
      assign_public_ip:      # when provisioning within vpc, assign a public IP address. Boto library must be 2.13.0+
      aws_access_key:        # AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or
                               EC2_ACCESS_KEY environment variable is used.
      aws_secret_key:        # AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY,
                               or EC2_SECRET_KEY environment variable is used.
      count:                 # number of instances to launch


[Module Categories]
  - Manage Servers
  - Deploy Configurations
  - Configure Network Equipment
  - Maintain Virtual Servers
  - Manage databases and tables
  - Deploy load-balancer configs

[Main Modules]
  - Copy Module: Copy file from local box to remote
                 Has backup capability
                 Can do validation remotely

  - Fetch Module: Pulls file from remote host to local system
                  Can use md5 checksums to validate

  - Apt Module: Manages install applications on Debian-based systems
                Can install, update, delete packages
                Can update entire system

  - Yum Module: Manages install applications on Redhat-based systems
                Can install, update, delete packages
                Can update entire system

  - Service Module: Can stop, start, restart services
                    Can eneable services to start on boot


[ Host / Group Target Patterns ]
NOTE: webservers:dbservers

ansible webservers:dbservers -i inventory -m service -a  "name=iptables state=stopped" --sudo

OR  pattern (group1:group2)    all hosts in both group 1 and group 2
NOT pattern (!group2)          all hosts NOT in group 2
Wildcard pattern (web*.example.com)   all hosts matching web*.example.com
Regex pattern  (~web[0-9]+)    NOTE: regex pattern must start with ~
AND pattern (group1:&group2)   This is an intersection between the two groups
                               ex. Webservers:&Production

Complex patterns:    Webservers:&prod:!python3
                     All Webservers and Production but not in python3


###############################################################################
## Setup Module
###############################################################################

Setup module like an inventory modules / fact module. Retrieves facts about OS
and system information.

> ansible web1 -i inventory -m setup
web1 | success >> {
    "ansible_facts": {
        "ansible_all_ipv4_addresses": [
            "10.0.2.15",
            "192.168.33.20"
        ],
        "ansible_all_ipv6_addresses": [
            "fe80::a00:27ff:fe15:d519",
            "fe80::a00:27ff:fe3f:93c3"
        ],
        "ansible_architecture": "x86_64",
        "ansible_bios_date": "12/01/2006",
        "ansible_bios_version": "VirtualBox",
        "ansible_cmdline": {
            "KEYBOARDTYPE": "pc",
            "KEYTABLE": "us",
            "LANG": "en_US.UTF-8",
            "SYSFONT": "latarcyrheb-sun16",
            "quiet": true,
            "rd_LVM_LV": "VolGroup/lv_root",
            "rd_NO_DM": true,
            "rd_NO_LUKS": true,
            "rd_NO_MD": true,
            "rhgb": true,
            "ro": true,
            "root": "/dev/mapper/VolGroup-lv_root"
        },
.
.
.
.
.
.
        "ohai_ohai_time": 1517764020.324803,
        "ohai_os": "linux",
        "ohai_os_version": "2.6.32-431.el6.x86_64",
        "ohai_platform": "centos",
        "ohai_platform_family": "rhel",
        "ohai_platform_version": "6.5",
        "ohai_root_group": "root",
        "ohai_uptime": "10 days 03 hours 05 minutes 19 seconds",
        "ohai_uptime_seconds": 875119,
        "ohai_virtualization": {
            "role": "guest",
            "system": "vbox"
        }
    },
    "changed": false
}

## Can run setup with a filter parameter for eth
##
> ansible web1 -i inventory -m setup -a "filter=ansible_eth*"
web1 | success >> {
    "ansible_facts": {
        "ansible_eth0": {
            "active": true,
            "device": "eth0",
            "ipv4": {
                "address": "10.0.2.15",
                "netmask": "255.255.255.0",
                "network": "10.0.2.0"
            },
            "ipv6": [
                {
                    "address": "fe80::a00:27ff:fe15:d519",
                    "prefix": "64",
                    "scope": "link"
                }
            ],
            "macaddress": "08:00:27:15:d5:19",
            "module": "e1000",
            "mtu": 1500,
            "promisc": false,
            "type": "ether"
        },
        "ansible_eth1": {
            "active": true,
            "device": "eth1",
            "ipv4": {
                "address": "192.168.33.20",
                "netmask": "255.255.255.0",
                "network": "192.168.33.0"
            },
            "ipv6": [
                {
                    "address": "fe80::a00:27ff:fe3f:93c3",
                    "prefix": "64",
                    "scope": "link"
                }
            ],
            "macaddress": "08:00:27:3f:93:c3",
            "module": "e1000",
            "mtu": 1500,
            "promisc": false,
            "type": "ether"
        }
    },
    "changed": false
}

## Can run setup with a filter parameter for mounts
##
> ansible web1 -i inventory -m setup -a "filter=ansible_mounts"
web1 | success >> {
    "ansible_facts": {
        "ansible_mounts": [
            {
                "device": "/dev/mapper/VolGroup-lv_root",
                "fstype": "ext4",
                "mount": "/",
                "options": "rw",
                "size_available": 194829983744,
                "size_total": 206629191680
            },
            {
                "device": "/dev/sda1",
                "fstype": "ext4",
                "mount": "/boot",
                "options": "rw",
                "size_available": 448076800,
                "size_total": 507744256
            }
        ]
    },
    "changed": false
}


## Run setup on all inventory and dump to setup direcotyr
##
> ansible all -i inventory -m setup  --tree ./setup

vagrant@acs:~/ex5a$ ls -ltR setup
setup:
total 72
-rw-rw-r-- 1 vagrant vagrant 33387 Feb  4 17:32 db1
-rw-rw-r-- 1 vagrant vagrant 33386 Feb  4 17:32 web1



###############################################################################
## Ansible Plays and Playbooks
###############################################################################

 - Plays map hosts to tasks
 - a play can have multiple tasks
 - a playbook can have multiple plays

Playbook example w/ 2 plays:

---
- hosts: webservers        << Each play always has a hosts and tasks declaration
  remote_user: root
  tasks:
  - name: Install Apache   << Each play always has a hosts and tasks declaration
    yum: name=httpd state=present
  - name: Start Apache
    service: name=httpd state=started

- hosts: dbservers
  remote_user: root
  tasks:
  - name: Install MySQL
    yum: name=mysql-server state=present   << Each task calls a module
  - name: Start MySQL
    service: name=mysqld state=started     << module can be passed parameters



Example of Play declarations:
- hosts: webservers         << define targets: hosts, groups or target patterns
  vars:                     << declare variables per play
    git_repo: https://github.com/repo.git
    http_port: 8080
    db_name: wordpress
  sudo: yes                 << user to run tasks (Note: no under vars)
  sudo_user: wordpress_user
  gather_facts: no          << don't gather facts on host, default is yes


NOTE: Tasks are executed in order - top down.  Tasks use module


Example of Play tasks:
  tasks:
  - name: Name this task for readability
    module: parameters=go_here

  - name: Deply Apache Configuration File
    copy: src=/ansible/files/conf/httpd.conf
          dest=/etc/httpd/conf/


NOTE: Name of tasks is displayed as it is currently being executed



## Execute Playbooks
##
> ansible-playbook playbook.yml

NOTE: if there is a failure, a retry file is created and you can rerun the
playbook utilizing the --limit option with the created retry file ex.

ansible-playbook playbook.yml --limit /home/vagrant/web_db_playbook.retry


> cat /home/vagrant/web_db.retry
db1



Sample Playbook:

---
- hosts: webservers
  sudo: yes

  tasks:
  - name: Ensure that Apache is installed
    yum: name=httpd state=present

  - name: Start Apache Services
    service: name=httpd enabled=yes state=started

- hosts: dbservers
  sudo: yes

  tasks:
  - name: Ensure MySQL is installed
    yum: name=mysql-server state=present

  - name: Start MySQL
    service: name=mysqld state=started

- hosts: webservers:dbservers
  sudo: yes

  tasks:
  - name: Stop IPTABLES now ...
    service: name=iptables state=stopped


## Including files
##
  - break up long paybooks
  - resue playbooks
  - add external variable files (i.e. dev / uat / prod )
ex.

  tasks:
    - include: wordpress.yml
      vars:
        sitename: Test Site
    - include: loadbalancer.yml
    - include_vars: variables.yml

## Register Task Output
##
  - use output of one task to another task
  - feed output of one to input of another
ex.

  tasks:
    - shell: /usr/bin/whoami
      register: username    << user register to capture output of task and reuse
    - file: path=/home/myfile.txt
            owner={{ username }}   << utilize capture register value


## Debug Module
##
  - provide info of running play
  - debug module can take 2 parameters msg / var
      - msg prints out string message to user
      - var prints value of variable

ex.

  tasks:
    - debug: msg="This host is {{ inventory_hostname }} during execution"

    - shell: /usr/bin/whoami
      register: username
    - debug: var=username


## Prompt for Input
##
ex.

- hosts: web1

  vars_prompt:
    - name: "sitename"
      prompt: "What is the new site name?"

  tasks:
   - debug: msg="The name is {{ sitename }}"



## Playbook Handlers
##
  - Tasks w/ asynchronous execution
  - Only runs tasks when notified
  - Tasks only notify when state=changed
  - Does not run until all playbook tasks have executed
  - Most common for restarting services to load changes
  - Executed only once
  - handlers have same syntax as tasks

ex.
  tasks:
   - copy: src=files/httpd.conf
           dest=/etc/httpd/conf/

     notify:
       - Apache Restart

  handlers:
   - name: Apache Restart
     service: name=httpd state=restarted


## Conditional execution using when
##
Selective installs dependent on OS type:


  tasks:
   - yum: name=httpd state=present
     when: ansible_os_family == "RedHat"

   - apt: name=apache2 state=present
     when: ansible_os_family == "Debian"


## Conditional clause based on output
##
  - track whether previous track ran
  - searches JSON result for status
  - Status Options:  success, failed, skipped

ex.
  tasks:
   - command: ls /path/doesnt/exist
     register: result
     ignore_errors: yes

   - debug: msg="Failure!"
     when: result|failed


## Templates
##
  - Uses Jinja2 Engine
  - Insert variables into static files
  - Creates and copies dynamic files
  - Deploy custom configurations

 Modify Template and Copy

ex.
  tasks:
    - template:
        src=templates/httpd.j2               << take file w/ predefined var name
        dest=/etc/httpd/conf/httpd.conf      << copy substituted file to dest
        owner=httpd                          << insert var name into template

ex httpd.j2
....
<VirtualHost *:80>
 ServerAdmin {{server_admin}}  << double braced vars substituted with var values
 DocumentRoot {{site_root}}
 ServerName {{inventory_hostname}}
</VirtualHost>
....






###############################################################################
